/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.1/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
plugins {
    id "java-library"
    id "maven-publish"
    id "eclipse"
    id "idea"
    id "signing"
    //id "org.owasp.dependencycheck" version "6.1.0"
}
Properties props = new Properties()
def propFile = new File(project.getProjectDir().getParentFile(), 'credentials.properties')
def artifactoryUrl="https://artifactory.distri-mind.fr:443/artifactory"
def sonatypeStagingUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
def artifactoryUser=""
def artifactoryPwd=""
def sonatypeUser=""
def sonatypePwd=""

if (propFile.canRead())
{
    props.load(new FileInputStream(propFile))


    if (props!=null && props.containsKey('artifactory_contextUrl'))
        artifactoryUrl=props.get("artifactory_contextUrl")
    if (props!=null && props.containsKey('artifactory_user'))
        artifactoryUser=props.get("artifactory_user")
    if (props!=null && props.containsKey('artifactory_password'))
        artifactoryPwd=props.get("artifactory_password")
    if (props!=null && props.containsKey('sonatype_staging_url'))
        sonatypeStagingUrl=props.get("sonatype_staging_url")
    if (props!=null && props.containsKey('sonatype_user'))
        sonatypeUser=props.get("sonatype_user")
    if (props!=null && props.containsKey('sonatype_password'))
        sonatypePwd=props.get("sonatype_password")
}


	


eclipse {
    classpath {
       downloadSources=true
    }
}

// In this section you declare where to find the dependencies of your project

repositories {


    maven {
        url "${artifactoryUrl}/gradle-release/"
        if (artifactoryUser!="")
        {
            credentials {
                username "${artifactoryUser}"
                password "${artifactoryPwd}"
            }
        }
    }


}

dependencies {
    var seamlessVersion='1.1.2'
    var xmlpullVersion='1.1.4'
    var cdiapiVerison='2.0.SP1'
    var androidVersion='4.1.1.4'
    var kxmlVersion='2.3.0'
    var jettyVersion='11.+'
    var slf4jVersion='2.0.7'
    var javaXAnnotationVersion='1.3.2'

    testImplementation 'org.testng:testng:7.7.1'
    testImplementation 'org.slf4j:slf4j-api:'+slf4jVersion
    testImplementation 'org.slf4j:slf4j-simple:'+slf4jVersion

    implementation 'org.seamless:seamless-util:'+seamlessVersion
    implementation 'org.seamless:seamless-http:'+seamlessVersion
    implementation 'org.seamless:seamless-xml:'+seamlessVersion
    implementation 'org.seamless:seamless-swing:'+seamlessVersion

    compileOnly 'org.xmlpull:com.springsource.org.xmlpull:'+xmlpullVersion

    compileOnly 'javax.enterprise:cdi-api:'+cdiapiVerison
    //implementation 'androidx.appcompat:appcompat:1.4.1'
    compileOnly ('com.google.android:android:'+androidVersion){
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'org.khronos', module: 'opengl-api'
        exclude group: 'org.json', module: 'json'
        exclude group: 'xerces', module: 'xmlParserAPIs'
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    compileOnly 'org.eclipse.jetty:jetty-server:'+jettyVersion
    compileOnly 'org.eclipse.jetty:jetty-servlet:'+jettyVersion
    compileOnly 'org.eclipse.jetty:jetty-client:'+jettyVersion
    compileOnly 'net.sf.kxml:kxml2:'+kxmlVersion


    testImplementation 'org.xmlpull:com.springsource.org.xmlpull:'+xmlpullVersion

    testImplementation 'javax.enterprise:cdi-api:'+cdiapiVerison
    //implementation 'androidx.appcompat:appcompat:1.4.1'
    testImplementation ('com.google.android:android:'+androidVersion){
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'org.khronos', module: 'opengl-api'
        exclude group: 'org.json', module: 'json'
        exclude group: 'xerces', module: 'xmlParserAPIs'
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    testImplementation 'org.eclipse.jetty:jetty-server:'+jettyVersion
    testImplementation 'org.eclipse.jetty:jetty-servlet:'+jettyVersion
    testImplementation 'org.eclipse.jetty:jetty-client:'+jettyVersion
    testImplementation 'net.sf.kxml:kxml2:'+kxmlVersion

    implementation 'javax.annotation:javax.annotation-api:'+javaXAnnotationVersion

}
def javaVersion=11
sourceCompatibility = javaVersion
targetCompatibility= javaVersion

/*idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
}*/

version='1.0.7-STABLE'


/*task generateVersionsFile(type:JavaExec, dependsOn:classes) {
    if (project.hasProperty('assemble') || project.hasProperty('build') || project.hasProperty('jar')) {
        def versionBuildFile = new File(project.getProjectDir(), 'src/main/resources/com/distrimind/upnp_igd/build.txt')


        if (versionBuildFile.canRead()) {
            def line = 0
            versionBuildFile.withReader { line = it.readLine() }
            def buildNumber = line.toInteger() + 1
            versionBuildFile.withWriter { out ->
                out.println buildNumber
            }
        } else {
            versionBuildFile.withWriter { out ->
                out.println 1
            }
        }

        getMainClass().set('com.distrimind.upnp_igd.UPnPIGD')
        classpath = sourceSets.main.runtimeClasspath
    }

}
task generateMDFiles (dependsOn: generateVersionsFile) {

    if (project.hasProperty('assemble') || project.hasProperty('build') || project.hasProperty('jar')) {


        doLast {
            def lastVersionFile = new File(project.getProjectDir().getParentFile(), 'lastVersion.md')


            project.version = lastVersionFile.getText('UTF-8').trim()

            def mdFile = new File(project.getProjectDir().getParentFile(), 'README_TO_EDIT.md')
            if (mdFile.canRead()) {
                def mdFileDest = new File(project.getProjectDir().getParentFile(), 'README.md')

                mdFileDest.newWriter().withWriter { w ->
                    w << mdFile.getText('UTF-8').replaceAll("//PROJECT_VERSION//", version.toString())

                }
            }
            ext.artifactVersion = String.valueOf(project.version)
            def pomFile = new File(project.getProjectDir(), 'build/publications/mavenJava/pom-default.xml')
            if (pomFile.canRead()) {
                String t = pomFile.getText('UTF-8').replaceAll("\\?\\?.\\?\\?.\\?\\?ToDefine", version.toString())

                pomFile.newWriter().withWriter { w ->
                    w << t
                }
            }


        }
    }


}*/

allprojects {
	group='com.distrimind.upnp_igd'

    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_9)) {
        compileJava.options.compilerArgs.addAll(['--release', javaVersion] as Collection<? extends String>)
        javadoc.options.addStringOption("html5", "-quiet")
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).tap {
            configureEach {
                options.compilerArgs << "-Xlint:unchecked"
            }
        }
    }
}



jar {
    manifest {
        attributes('Implementation-Title': project.name)
        attributes('Automatic-Module-Name': 'com.distrimind.upnp_igd')
        attributes('Implementation-Version': project.version)
    }
    from "LICENSE"

}


tasks.register('sourcesJar', Jar) {
    dependsOn classes

    archiveClassifier.set("sources")
    from sourceSets.main.allSource
    manifest {
        attributes('Implementation-Title': project.name)
        attributes('Automatic-Module-Name': 'com.distrimind.upnp_igd')
        attributes('Implementation-Version': project.version)
    }
    from "LICENSE"
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
    manifest {
        attributes('Implementation-Title': project.name)
        attributes('Automatic-Module-Name': 'com.distrimind.upnp_igd')
        attributes('Implementation-Version': project.version)
    }
    from "LICENSE"
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}


test {
     
     // enable TestNG support (default is JUnit)
   	useTestNG
   	{
   		suites 'src/test/java/com/distrimind/util/AllTestsNG.xml'
   	}
  
   // set heap size for the test JVM(s)
   minHeapSize = "1m"
   maxHeapSize = "6g"
	/*testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }*/
 }

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'UPnPIGD'
                description = 'UPnP IGD stack for Java and Android'
                url = 'https://github.com/JasonMahdjoub/UPnPIGD'
                developers {
                    developer {
                        id = 'cb'
                        name = 'Christian Bauer'
                        email = 'cb@4thline.com'
                        organization = '4th Line GmbH, Switzerland'
                        roles.add('Project Lead')
                    }
                    developer {
                        id = 'jmahdjoub'
                        name = 'Jason Mahdjoub'
                        email = 'jason.mahdjoub@distri-mind.fr'
                        organization = 'DistriMind'
                        roles.add('Entrepreneur')
                        roles.add('Developer')
                    }
                }
                organization {
                    name = 'DistriMind'
                    url = 'https://github.com/JasonMahdjoub'
                }
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/JasonMahdjoub/UPnPIGD/issues'
                }
                scm {
                    connection = 'https://github.com/JasonMahdjoub/UPnPIGD'
                    developerConnection = connection
                    url = connection
                }
                licenses {
                    license {
                        name = 'GNU LESSER GENERAL PUBLIC LICENSE'
                        url = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                    }
                }

            }
        }
    }
    repositories {
        maven {
            credentials {
                username "${artifactoryUser}"
                password "${artifactoryPwd}"
            }
            url "${artifactoryUrl}/DistriMind-Public"
        }
        maven {
            credentials {
                username "${sonatypeUser}"
                password "${sonatypePwd}"
            }
            url "${sonatypeStagingUrl}"
        }
    }
}
signing {
    useGpgCmd()
    required {!project.hasProperty('disableSigning')}
    if (required) {
        sign configurations.archives
        sign publishing.publications.mavenJava
    }

}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

