

Properties props = new Properties()
def propFile = new File(project.getProjectDir().getParentFile(), 'credentials.properties')
def artifactoryUrl="https://artifactory.distri-mind.fr:443/artifactory"
def artifactoryUser=""
def artifactoryPwd=""
def onedevUser = ""
def onedevPwd = ""


if (propFile.canRead())
{
    props.load(new FileInputStream(propFile))


    if (props!=null && props.containsKey('artifactory_contextUrl'))
        artifactoryUrl=props.get("artifactory_contextUrl")
    if (props!=null && props.containsKey('artifactory_user'))
        artifactoryUser=props.get("artifactory_user")
    if (props!=null && props.containsKey('artifactory_password'))
        artifactoryPwd=props.get("artifactory_password")
    if (props != null && props.containsKey('onedev_user'))
        onedevUser = props.get("onedev_user")
    if (props != null && props.containsKey('onedev_password'))
        onedevPwd = props.get("onedev_password")
}


version='1.5.4-STABLE'
group='fr.distrimind.oss.upnp'


subprojects {

    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'pmd'


    repositories {


        maven {
            url = "${artifactoryUrl}/gradle-release/"
            if (artifactoryUser!="")
            {
                credentials {
                    username = "${artifactoryUser}"
                    password = "${artifactoryPwd}"
                }
            }
        }

    }
    pmd {
        consoleOutput = true
        toolVersion = "7.13.0"
        rulesMinimumPriority = 5
        ruleSetFiles = files("../pmd/pmd-rules.xml")
    }


    version=parent.version

    def projectName=project.name
    jar {
        manifest {
            attributes('Implementation-Title': project.name,
                    'Implementation-Version': project.version)
        }

        manifest.attributes('Multi-Release': 'false')
        manifest.attributes('Bundle-Name': jar.archiveBaseName)
        manifest.attributes('Bundle-SymbolicName': jar.archiveBaseName)
        manifest.attributes('Bundle-RequiredExecutionEnvironment': 'JavaSE-'+JavaVersion.VERSION_11)

        from('../COPYING') {
            rename { fileName ->
                "COPYING-$projectName"
            }
        }
        from('NOTICE') {
            rename { fileName ->
                "NOTICE-$projectName"
            }
        }
    }


    tasks.register('sourcesJar', Jar) {
        dependsOn classes
        manifest {
            attributes('Implementation-Title': project.name,
                    'Implementation-Version': project.version)
        }
        archiveClassifier.set("sources")
        from sourceSets.main.allSource
        from('../COPYING') {
            rename { fileName ->
                "COPYING-$projectName"
            }
        }
        from('NOTICE') {
            rename { fileName ->
                "NOTICE-$projectName"
            }
        }
    }

    tasks.register('javadocJar', Jar) {
        dependsOn javadoc
        manifest {
            attributes('Implementation-Title': project.name,
                    'Implementation-Version': project.version)
        }
        archiveClassifier.set("javadoc")
        from javadoc.destinationDir
        from('../COPYING') {
            rename { fileName ->
                "COPYING-$projectName"
            }
        }
        from('NOTICE') {
            rename { fileName ->
                "NOTICE-$projectName"
            }
        }
    }
    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = project.name
                    description = 'DM-UPnP stack for Java and Android'
                    url = 'https://github.com/DistriMind/DM-UPnP'
                    developers {
                        developer {
                            id = 'cb'
                            name = 'Christian Bauer'
                            email = 'cb@4thline.com'
                            organization = '4th Line GmbH, Switzerland'
                            roles.add('Project Lead')
                        }
                        developer {
                            id = 'jmahdjoub'
                            name = 'Jason Mahdjoub'
                            email = 'jason.mahdjoub@distri-mind.fr'
                            organization = 'DistriMind'
                        }
                    }
                    organization {
                        name = 'DistriMind'
                        url = 'https://github.com/DistriMind'
                    }
                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/DistriMind/DM-UPnP/issues'
                    }
                    scm {
                        connection = 'scm:git:https://git.distri-mind.fr/DM-UPnP'
                        developerConnection = 'scm:git:https://git.distri-mind.fr/DM-UPnP'
                        url = 'https://git.distri-mind.fr/DM-UPnP'
                    }
                    licenses {
                        license {
                            name = 'GNU LESSER GENERAL PUBLIC COPYING Version 2.1'
                            url = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                        }
                    }

                }
            }
        }
        repositories {
            maven {
                credentials {
                    username = "${artifactoryUser}"
                    password = "${artifactoryPwd}"
                }
                url = "${artifactoryUrl}/DistriMind-Public"
            }
            maven {
                credentials {
                    username = "${onedevUser}"
                    password = "${onedevPwd}"
                }
                url = 'https://git.distri-mind.fr/DM-UPnP/~maven'
            }
        }
    }
    signing {
        useGpgCmd()
        required = {!project.hasProperty('disableSigning')}
        if (required) {
            sign configurations.archives
            sign publishing.publications.mavenJava
        }

    }

}











